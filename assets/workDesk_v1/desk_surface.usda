#usda 1.0
(
    defaultPrim = "DeskSurface"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "DeskSurface" (
    kind = "component"
)
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Scope "Looks"
    {
        def Material "desk_surface_Material"
        {
            token outputs:mdl:displacement.connect = </DeskSurface/Looks/desk_surface_Material/desk_surface_Shader.outputs:out>
            token outputs:mdl:surface.connect = </DeskSurface/Looks/desk_surface_Material/desk_surface_Shader.outputs:out>
            token outputs:mdl:volume.connect = </DeskSurface/Looks/desk_surface_Material/desk_surface_Shader.outputs:out>

            def Shader "desk_surface_Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.76, 0.60, 0.42) (
                    customData = {
                        float3 default = (0.76, 0.60, 0.42)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the albedo base color"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:emissive_color = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                )
                float inputs:emissive_intensity = 10000 (
                    customData = {
                        float default = 10000
                        dictionary range = {
                            float max = 100000
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                )
                bool inputs:enable_opacity = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                )
                bool inputs:enable_opacity_texture = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                )
                int inputs:opacity_mode = 1 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                float inputs:opacity_threshold = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                )
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 360
                            float min = 0
                        }
                    }
                    displayGroup = "UV"
                    displayName = "Texture Rotate"
                )
                float2 inputs:texture_scale = (1, 1) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Scale"
                )
                float2 inputs:texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Translate"
                )
                token outputs:out
            }
        }
    }

    def Xform "node_"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "mesh_" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.4572, -0.6096, 0), (0.4572, 0.6096, 0.03)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
            rel material:binding = </DeskSurface/Looks/desk_surface_Material>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -0, -1), (0, -0, -1), (0, -0, -1), (-0, 0, 1), (-0, 0, 1), (-0, 0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -1, -0), (-0, -1, -0), (-0, -1, -0), (-0, -1, -0), (-0, -1, -0), (-0, -1, -0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, -0, -0), (-1, -0, -0), (-1, -0, -0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, -0, -0), (1, -0, -0), (1, -0, -0), (-0, 1, 0), (-0, 1, 0), (-0, 1, 0), (-0, 1, 0), (-0, 1, 0), (-0, 1, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.4572, -0.6096, 0), (-0.4572, 0.6096, 0), (0.4572, -0.6096, 0), (-0.4572, 0.6096, 0), (0.4572, 0.6096, 0), (0.4572, -0.6096, 0), (-0.4572, 0.6096, 0.03), (-0.4572, -0.6096, 0.03), (0.4572, 0.6096, 0.03), (-0.4572, -0.6096, 0.03), (0.4572, -0.6096, 0.03), (0.4572, 0.6096, 0.03), (0.4572, -0.6096, 0.03), (-0.4572, -0.6096, 0.03), (0.4572, -0.6096, 0), (-0.4572, -0.6096, 0.03), (-0.4572, -0.6096, 0), (0.4572, -0.6096, 0), (-0.4572, -0.6096, 0.03), (-0.4572, 0.6096, 0.03), (-0.4572, -0.6096, 0), (-0.4572, 0.6096, 0.03), (-0.4572, 0.6096, 0), (-0.4572, -0.6096, 0), (0.4572, 0.6096, 0.03), (0.4572, -0.6096, 0.03), (0.4572, 0.6096, 0), (0.4572, -0.6096, 0.03), (0.4572, -0.6096, 0), (0.4572, 0.6096, 0), (-0.4572, 0.6096, 0.03), (0.4572, 0.6096, 0.03), (-0.4572, 0.6096, 0), (0.4572, 0.6096, 0.03), (0.4572, 0.6096, 0), (-0.4572, 0.6096, 0)]
            uniform token subdivisionScheme = "none"
        }
    }
}

